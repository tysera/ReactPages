// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: miVpALEuuUaq61WfC71rVq
// Component: 5YQc-62Jxnmt
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPink from "../../ButtonPink"; // plasmic-import: oJRzKe_Tkb/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent

import { useScreenVariants as useScreenVariants_8XAjZgPEqNgL } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 8XAjZg_pEqNgL/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project_mobile_first.module.css"; // plasmic-import: miVpALEuuUaq61WfC71rVq/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 5YQc-62Jxnmt/css

import ShapeIcon from "./icons/PlasmicIcon__Shape"; // plasmic-import: 5IG5ePCEHD/icon
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: tIQXfYM0Sm/icon
import Ellipse8Icon from "./icons/PlasmicIcon__Ellipse8"; // plasmic-import: l1TTguE2sv/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: N-9BdC7zEd/icon
import Shape2Icon from "./icons/PlasmicIcon__Shape2"; // plasmic-import: dh2UT2Ruil/icon
import _Icon from "./icons/PlasmicIcon___"; // plasmic-import: ImcgXmZ4vvP/icon
import _1Icon from "./icons/PlasmicIcon___1"; // plasmic-import: eYB1sfWxkCz/icon
import Group5Icon from "./icons/PlasmicIcon__Group5"; // plasmic-import: _TmIsjYzOA-/icon
import IsoStackSvgrepoCom1Icon from "./icons/PlasmicIcon__IsoStackSvgrepoCom1"; // plasmic-import: 48v39mgbs58/icon
import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: vDMnX7MpwBo/icon
import Vector4Icon from "./icons/PlasmicIcon__Vector4"; // plasmic-import: qfsckuAtGUy/icon
import Vector5Icon from "./icons/PlasmicIcon__Vector5"; // plasmic-import: oZBH3ZAkveA/icon
import _2Icon from "./icons/PlasmicIcon___2"; // plasmic-import: 6wCLoC92p--/icon
import _3Icon from "./icons/PlasmicIcon___3"; // plasmic-import: 8E0kxkZVL2g/icon
import _4Icon from "./icons/PlasmicIcon___4"; // plasmic-import: CjbdvXfzPBc/icon
import Shape3Icon from "./icons/PlasmicIcon__Shape3"; // plasmic-import: 1YjPLMCtQZ6/icon
import Group4Icon from "./icons/PlasmicIcon__Group4"; // plasmic-import: kLDBe2XdyVN/icon
import rectangle65EkKe0PAv4D from "./images/rectangle65.svg"; // plasmic-import: EKKe0pAV4D/picture
import _2560PxUpworkLogo2F8Hg9FvMh3 from "./images/_2560PxUpworkLogo2.svg"; // plasmic-import: F8hg9fvMH3/picture
import githubSvgrepoCom3BV2Vsrbs1J from "./images/githubSvgrepoCom3.svg"; // plasmic-import: bV2Vsrbs1J/picture
import slackRXLoejxBz9 from "./images/slack.svg"; // plasmic-import: rXLoejxBZ9/picture
import rectangle66DwZtWd77Xy from "./images/rectangle66.svg"; // plasmic-import: dwZtWd77XY/picture
import rectangle67RAYBsV8Ej from "./images/rectangle67.svg"; // plasmic-import: rA_yBsV8Ej/picture
import vector3OYLiBzCcz7Q from "./images/vector3.svg"; // plasmic-import: oYLiBZCcz7q/picture
import endCircle0P3UwQmKmM from "./images/endCircle.svg"; // plasmic-import: _0P3UWQmKmM/picture
import figmaLogo1WcKsn3GojTg from "./images/figmaLogo1.svg"; // plasmic-import: WCKsn3gojTg/picture
import endCircle2IxKUp3AN9R from "./images/endCircle2.svg"; // plasmic-import: Ix_KUp3aN9R/picture
import lineGraphicBg1Cff56R5SLm from "./images/lineGraphicBg1.svg"; // plasmic-import: Cff56r5sLm/picture
import group7LmHup7R1Z from "./images/group7.svg"; // plasmic-import: LmHUP7R1Z-/picture

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  landing?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  heroCentre?: p.Flex<"div">;
  tyseraIsABespokeDesignAgencyProvidingBeautifulUxWebsiteDesignAndExpertDeploymentServicesToBusinessesOfAllSizes?: p.Flex<"div">;
  frame4?: p.Flex<"div">;
  button2?: p.Flex<"div">;
  frame13?: p.Flex<"div">;
  frame14?: p.Flex<"div">;
  footer?: p.Flex<"div">;
  logoFooter?: p.Flex<"div">;
  link?: p.Flex<"div">;
  link2?: p.Flex<"div">;
  link3?: p.Flex<"div">;
  link4?: p.Flex<"div">;
  link5?: p.Flex<"div">;
  link6?: p.Flex<"div">;
  slack?: p.Flex<"div">;
  frame7?: p.Flex<"div">;
  navbar?: p.Flex<"div">;
  navLeft?: p.Flex<"div">;
  frame5?: p.Flex<"div">;
  frame3?: p.Flex<"div">;
  frame10?: p.Flex<"div">;
  frame11?: p.Flex<"div">;
  navRight?: p.Flex<"div">;
  button5?: p.Flex<"div">;
  frame8?: p.Flex<"div">;
  navbar2?: p.Flex<"div">;
  navLeft2?: p.Flex<"div">;
  frame6?: p.Flex<"div">;
  frame9?: p.Flex<"div">;
  navRight2?: p.Flex<"div">;
  frame2?: p.Flex<"div">;
  group6?: p.Flex<"div">;
  button4?: p.Flex<"div">;
  frame24?: p.Flex<"div">;
  lineGraphicBg?: p.Flex<"div">;
  cloudwaysLogo1?: p.Flex<"div">;
  straight?: p.Flex<"div">;
  group?: p.Flex<"div">;
  group2?: p.Flex<"div">;
  group3?: p.Flex<"div">;
  group4?: p.Flex<"div">;
  wordpressSvgrepoCom1?: p.Flex<"div">;
  straight2?: p.Flex<"div">;
  straight3?: p.Flex<"div">;
  straight4?: p.Flex<"div">;
  group5?: p.Flex<"div">;
  endArrow?: p.Flex<"div">;
  straight5?: p.Flex<"div">;
  straight6?: p.Flex<"div">;
  annotation1?: p.Flex<"div">;
  annotation12?: p.Flex<"div">;
  annotation13?: p.Flex<"div">;
  annotation14?: p.Flex<"div">;
  annotationHeaderMulti?: p.Flex<"div">;
  frame25?: p.Flex<"div">;
  annotationFeatures2?: p.Flex<"div">;
  plasmic2?: p.Flex<"div">;
  shopifyLogo1?: p.Flex<"div">;
  strapiIconSvgrepoCom1?: p.Flex<"div">;
  annotation15?: p.Flex<"div">;
  annotation16?: p.Flex<"div">;
  annotationHeaderMulti2?: p.Flex<"div">;
  frame26?: p.Flex<"div">;
};

export interface DefaultHomepageProps {
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_8XAjZgPEqNgL()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {(
            hasVariant(globalVariants, "screen", "desktopOnly") ? true : true
          ) ? (
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"Welcome to your first page."}
            </h1>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "desktopOnly") ? true : true
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__xFae
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "If you haven't already done so, go back and learn the basics by going through the Plasmic Levels tutorial.\n\nIt's always easier to start from examples! Add a new page using a template—do this from the list of pages in the top left (the gray + button).\n\nOr press the big blue + button to start dragging items into this page.\n\nIntegrate this project into your codebase—press the "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"Code"}
                </span>
                <React.Fragment>
                  {
                    " button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "desktopOnly") ? true : false
          ) ? (
            <div
              data-plasmic-name={"landing"}
              data-plasmic-override={overrides.landing}
              className={classNames(projectcss.all, sty.landing)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"hero"}
                data-plasmic-override={overrides.hero}
                hasGap={true}
                className={classNames(projectcss.all, sty.hero)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"heroCentre"}
                  data-plasmic-override={overrides.heroCentre}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.heroCentre)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nArfq
                    )}
                  >
                    {"We build beautiful\nuser experiences"}
                  </div>

                  <div
                    data-plasmic-name={
                      "tyseraIsABespokeDesignAgencyProvidingBeautifulUxWebsiteDesignAndExpertDeploymentServicesToBusinessesOfAllSizes"
                    }
                    data-plasmic-override={
                      overrides.tyseraIsABespokeDesignAgencyProvidingBeautifulUxWebsiteDesignAndExpertDeploymentServicesToBusinessesOfAllSizes
                    }
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.tyseraIsABespokeDesignAgencyProvidingBeautifulUxWebsiteDesignAndExpertDeploymentServicesToBusinessesOfAllSizes
                    )}
                  >
                    {
                      "Tysera is a bespoke design agency providing beautiful UX website design and expert deployment services to businesses of all sizes. \n"
                    }
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame4"}
                    data-plasmic-override={overrides.frame4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame4)}
                  >
                    <ButtonPink
                      className={classNames(
                        "__wab_instance",
                        sty.buttonPink__zC3Pl
                      )}
                    />

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"button2"}
                      data-plasmic-override={overrides.button2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.button2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bo79E
                        )}
                      >
                        {"Learn more"}
                      </div>

                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mIifz
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "desktopOnly")
                              ? true
                              : true
                          ) ? (
                            <ShapeIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jiSv
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </div>
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              {(
                hasVariant(globalVariants, "screen", "desktopOnly")
                  ? true
                  : true
              ) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__vlpb)}
                  displayHeight={"1265px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"1345px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: rectangle65EkKe0PAv4D,
                    fullWidth: 1345,
                    fullHeight: 1265,
                    aspectRatio: 1063241
                  }}
                />
              ) : null}

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame13"}
                data-plasmic-override={overrides.frame13}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame13)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame14"}
                  data-plasmic-override={overrides.frame14}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame14)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sq48
                    )}
                  >
                    {"Find us on"}
                  </div>

                  {(
                    hasVariant(globalVariants, "screen", "desktopOnly")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__uIrJk)}
                      displayHeight={"65px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"129px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: _2560PxUpworkLogo2F8Hg9FvMh3,
                        fullWidth: 129,
                        fullHeight: 65,
                        aspectRatio: 1984615
                      }}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"footer"}
                data-plasmic-override={overrides.footer}
                hasGap={true}
                className={classNames(projectcss.all, sty.footer)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"logoFooter"}
                  data-plasmic-override={overrides.logoFooter}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.logoFooter)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "desktopOnly")
                      ? true
                      : true
                  ) ? (
                    <VectorIcon
                      className={classNames(projectcss.all, sty.svg__iJaGk)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mhM1Z
                    )}
                  >
                    {"tysera"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.link)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"link2"}
                    data-plasmic-override={overrides.link2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.link2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pi2QS
                      )}
                    >
                      {"Services"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"link3"}
                    data-plasmic-override={overrides.link3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.link3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mtY29
                      )}
                    >
                      {"Cloud"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"link4"}
                    data-plasmic-override={overrides.link4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.link4)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "desktopOnly")
                        ? true
                        : true
                    ) ? (
                      <Ellipse8Icon
                        className={classNames(projectcss.all, sty.svg___96Nw)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eo22T
                      )}
                    >
                      {"Status"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"link5"}
                    data-plasmic-override={overrides.link5}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.link5)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "desktopOnly")
                        ? true
                        : true
                    ) ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___5Dsbc)}
                        displayHeight={"38px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"38px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: githubSvgrepoCom3BV2Vsrbs1J,
                          fullWidth: 38,
                          fullHeight: 38,
                          aspectRatio: 1000000
                        }}
                      />
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"link6"}
                    data-plasmic-override={overrides.link6}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.link6)}
                  >
                    <div
                      data-plasmic-name={"slack"}
                      data-plasmic-override={overrides.slack}
                      className={classNames(projectcss.all, sty.slack)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__hMa1)}
                          displayHeight={"25.999px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"26px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: slackRXLoejxBz9,
                            fullWidth: 26,
                            fullHeight: 25.999,
                            aspectRatio: 1000000
                          }}
                        />
                      ) : null}
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame7"}
                data-plasmic-override={overrides.frame7}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.frame7,
                  "navbar" as const
                )}
                id={"" as const}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"navbar"}
                  data-plasmic-override={overrides.navbar}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.navbar)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"navLeft"}
                    data-plasmic-override={overrides.navLeft}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.navLeft)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "desktopOnly")
                        ? true
                        : true
                    ) ? (
                      <Vector2Icon
                        className={classNames(projectcss.all, sty.svg___0OV5B)}
                        role={"img"}
                      />
                    ) : null}

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame5"}
                      data-plasmic-override={overrides.frame5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jqkVs
                        )}
                      >
                        {"Services"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame3"}
                      data-plasmic-override={overrides.frame3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jkLg9
                        )}
                      >
                        {"Cloud"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame10"}
                      data-plasmic-override={overrides.frame10}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame10)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__acVp9
                        )}
                      >
                        {"Blog"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame11"}
                      data-plasmic-override={overrides.frame11}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame11)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dqmjj
                        )}
                      >
                        {"Inquire"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"navRight"}
                    data-plasmic-override={overrides.navRight}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.navRight)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"button5"}
                      data-plasmic-override={overrides.button5}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.button5)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__my4Ih
                        )}
                      >
                        {"Log in"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame8"}
                  data-plasmic-override={overrides.frame8}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame8)}
                  id={"navbar" as const}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"navbar2"}
                    data-plasmic-override={overrides.navbar2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.navbar2)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"navLeft2"}
                      data-plasmic-override={overrides.navLeft2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.navLeft2)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <Vector2Icon
                          className={classNames(projectcss.all, sty.svg__yyR4L)}
                          role={"img"}
                        />
                      ) : null}

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame6"}
                        data-plasmic-override={overrides.frame6}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame6)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__m7BrO
                          )}
                        >
                          {"Services"}
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame9"}
                        data-plasmic-override={overrides.frame9}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame9)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zwTKv
                          )}
                        >
                          {"Cloud"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"navRight2"}
                      data-plasmic-override={overrides.navRight2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.navRight2)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"frame2"}
                        data-plasmic-override={overrides.frame2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.frame2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rNpbN
                          )}
                        >
                          {"GET A PROJECT QUOTE"}
                        </div>
                      </p.Stack>

                      <div
                        data-plasmic-name={"group6"}
                        data-plasmic-override={overrides.group6}
                        className={classNames(projectcss.all, sty.group6)}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"button4"}
                          data-plasmic-override={overrides.button4}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.button4)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__foDb3
                            )}
                          >
                            {"Log in"}
                          </div>

                          {(
                            hasVariant(globalVariants, "screen", "desktopOnly")
                              ? true
                              : true
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__j4CFv
                              )}
                            >
                              {(
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "desktopOnly"
                                )
                                  ? true
                                  : true
                              ) ? (
                                <Shape2Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__sC0OV
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                          ) : null}
                        </p.Stack>
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <Embed
                    className={classNames(
                      "__wab_instance",
                      sty.embedHtml__pT9Df
                    )}
                    code={
                      '<script>\n    window.onscroll = function() {scrollFunction()};\n\nfunction scrollFunction() {\n  if (document.body.scrollTop > 50 || document.documentElement.scrollTop > 50) {\n    document.getElementById("navbar").style.top = "0";\n  } else {\n    document.getElementById("navbar").style.top = "-100px";\n  }\n}\n</script>' as const
                    }
                  />
                </p.Stack>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktopOnly")
                  ? true
                  : true
              ) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qZhJ)}
                  displayHeight={"1265px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"1345px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: rectangle66DwZtWd77Xy,
                    fullWidth: 1345,
                    fullHeight: 1265,
                    aspectRatio: 1063241
                  }}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktopOnly")
                  ? true
                  : true
              ) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__d9Vl)}
                  displayHeight={"1265px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"1345px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: rectangle67RAYBsV8Ej,
                    fullWidth: 1345,
                    fullHeight: 1265,
                    aspectRatio: 1063241
                  }}
                />
              ) : null}

              <div
                data-plasmic-name={"frame24"}
                data-plasmic-override={overrides.frame24}
                className={classNames(projectcss.all, sty.frame24)}
              >
                {false ? (
                  <div
                    data-plasmic-name={"lineGraphicBg"}
                    data-plasmic-override={overrides.lineGraphicBg}
                    className={classNames(projectcss.all, sty.lineGraphicBg)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "desktopOnly")
                        ? true
                        : true
                    ) ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__b90G5)}
                        displayHeight={"156px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"156px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: vector3OYLiBzCcz7Q,
                          fullWidth: 156,
                          fullHeight: 156,
                          aspectRatio: 1000000
                        }}
                      />
                    ) : null}

                    <div
                      data-plasmic-name={"cloudwaysLogo1"}
                      data-plasmic-override={overrides.cloudwaysLogo1}
                      className={classNames(projectcss.all, sty.cloudwaysLogo1)}
                    />

                    <div
                      data-plasmic-name={"straight"}
                      data-plasmic-override={overrides.straight}
                      className={classNames(projectcss.all, sty.straight)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <_Icon
                          className={classNames(projectcss.all, sty.svg__hvUbo)}
                          role={"img"}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <_1Icon
                          className={classNames(projectcss.all, sty.svg__paOf)}
                          role={"img"}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__uPXz)}
                          displayHeight={"16px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"16px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: endCircle0P3UwQmKmM,
                            fullWidth: 16,
                            fullHeight: 16,
                            aspectRatio: 1777778
                          }}
                        />
                      ) : null}
                    </div>

                    <div
                      data-plasmic-name={"group"}
                      data-plasmic-override={overrides.group}
                      className={classNames(projectcss.all, sty.group)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__mRx0Y)}
                          displayHeight={"156px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"156px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: vector3OYLiBzCcz7Q,
                            fullWidth: 156,
                            fullHeight: 156,
                            aspectRatio: 1000000
                          }}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <Group5Icon
                          className={classNames(projectcss.all, sty.svg__ilOQu)}
                          role={"img"}
                        />
                      ) : null}
                    </div>

                    <div
                      data-plasmic-name={"group2"}
                      data-plasmic-override={overrides.group2}
                      className={classNames(projectcss.all, sty.group2)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__dmrLk)}
                          displayHeight={"156px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"156px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: vector3OYLiBzCcz7Q,
                            fullWidth: 156,
                            fullHeight: 156,
                            aspectRatio: 1000000
                          }}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___9SiLz)}
                          displayHeight={"94px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"63px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: figmaLogo1WcKsn3GojTg,
                            fullWidth: 63,
                            fullHeight: 94,
                            aspectRatio: 670213
                          }}
                        />
                      ) : null}
                    </div>

                    <div
                      data-plasmic-name={"group3"}
                      data-plasmic-override={overrides.group3}
                      className={classNames(projectcss.all, sty.group3)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__zefku)}
                          displayHeight={"156px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"156px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: vector3OYLiBzCcz7Q,
                            fullWidth: 156,
                            fullHeight: 156,
                            aspectRatio: 1000000
                          }}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <IsoStackSvgrepoCom1Icon
                          className={classNames(projectcss.all, sty.svg__uBVrK)}
                          role={"img"}
                        />
                      ) : null}
                    </div>

                    <div
                      data-plasmic-name={"group4"}
                      data-plasmic-override={overrides.group4}
                      className={classNames(projectcss.all, sty.group4)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___71Og)}
                          displayHeight={"156px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"156px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: vector3OYLiBzCcz7Q,
                            fullWidth: 156,
                            fullHeight: 156,
                            aspectRatio: 1000000
                          }}
                        />
                      ) : null}

                      <div
                        data-plasmic-name={"wordpressSvgrepoCom1"}
                        data-plasmic-override={overrides.wordpressSvgrepoCom1}
                        className={classNames(
                          projectcss.all,
                          sty.wordpressSvgrepoCom1
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "desktopOnly")
                            ? true
                            : true
                        ) ? (
                          <GroupIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___5R3El
                            )}
                            role={"img"}
                          />
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "desktopOnly")
                            ? true
                            : true
                        ) ? (
                          <Vector4Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__rLdrA
                            )}
                            role={"img"}
                          />
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "desktopOnly")
                            ? true
                            : true
                        ) ? (
                          <Vector5Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__x3FNz
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>

                      <div
                        data-plasmic-name={"straight2"}
                        data-plasmic-override={overrides.straight2}
                        className={classNames(projectcss.all, sty.straight2)}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "desktopOnly")
                            ? true
                            : true
                        ) ? (
                          <_Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__oljYh
                            )}
                            role={"img"}
                          />
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "desktopOnly")
                            ? true
                            : true
                        ) ? (
                          <_1Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__qFiGu
                            )}
                            role={"img"}
                          />
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "desktopOnly")
                            ? true
                            : true
                        ) ? (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__q321S)}
                            displayHeight={"16px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"16px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: endCircle2IxKUp3AN9R,
                              fullWidth: 16,
                              fullHeight: 16,
                              aspectRatio: 1777778
                            }}
                          />
                        ) : null}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"straight3"}
                      data-plasmic-override={overrides.straight3}
                      className={classNames(projectcss.all, sty.straight3)}
                    >
                      <div
                        data-plasmic-name={"straight4"}
                        data-plasmic-override={overrides.straight4}
                        className={classNames(projectcss.all, sty.straight4)}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "desktopOnly")
                            ? true
                            : true
                        ) ? (
                          <_2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__yjXPa
                            )}
                            role={"img"}
                          />
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "desktopOnly")
                            ? true
                            : true
                        ) ? (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__i9EDb)}
                            displayHeight={"16px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"16px" as const}
                            loading={"lazy" as const}
                            src={{
                              src: endCircle0P3UwQmKmM,
                              fullWidth: 16,
                              fullHeight: 16,
                              aspectRatio: 1777778
                            }}
                          />
                        ) : null}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"group5"}
                      data-plasmic-override={overrides.group5}
                      className={classNames(projectcss.all, sty.group5)}
                    >
                      <div
                        data-plasmic-name={"endArrow"}
                        data-plasmic-override={overrides.endArrow}
                        className={classNames(projectcss.all, sty.endArrow)}
                      />

                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__iz3N8)}
                          displayHeight={"16px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"16px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: endCircle0P3UwQmKmM,
                            fullWidth: 16,
                            fullHeight: 16,
                            aspectRatio: 1777778
                          }}
                        />
                      ) : null}
                    </div>

                    <div
                      data-plasmic-name={"straight5"}
                      data-plasmic-override={overrides.straight5}
                      className={classNames(projectcss.all, sty.straight5)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <_3Icon
                          className={classNames(projectcss.all, sty.svg__k1NY)}
                          role={"img"}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__gEc6R)}
                          displayHeight={"16px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"16px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: endCircle0P3UwQmKmM,
                            fullWidth: 16,
                            fullHeight: 16,
                            aspectRatio: 1777778
                          }}
                        />
                      ) : null}
                    </div>

                    <div
                      data-plasmic-name={"straight6"}
                      data-plasmic-override={overrides.straight6}
                      className={classNames(projectcss.all, sty.straight6)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <_4Icon
                          className={classNames(projectcss.all, sty.svg__mdpjr)}
                          role={"img"}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__wzmD)}
                          displayHeight={"16px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"16px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: endCircle0P3UwQmKmM,
                            fullWidth: 16,
                            fullHeight: 16,
                            aspectRatio: 1777778
                          }}
                        />
                      ) : null}
                    </div>
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "desktopOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__sz71Z)}
                    displayHeight={"2820px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"836px" as const}
                    loading={"eager" as const}
                    src={{
                      src: lineGraphicBg1Cff56R5SLm,
                      fullWidth: 836,
                      fullHeight: 2820,
                      aspectRatio: 296454
                    }}
                  />
                ) : null}

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"annotation1"}
                  data-plasmic-override={overrides.annotation1}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.annotation1)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oMfgV
                    )}
                  >
                    {"We design expertly in Figma"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yISfo
                    )}
                  >
                    {
                      "We’ll create beautiful UX design prototypes in Figma. Then we send it to the dev team to build it into one of two fully functional website stacks."
                    }
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"annotation12"}
                  data-plasmic-override={overrides.annotation12}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.annotation12)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "desktopOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pwPwH)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <Shape3Icon
                          className={classNames(projectcss.all, sty.svg__tyNgN)}
                          role={"img"}
                        />
                      ) : null}
                    </div>
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kmBo8
                    )}
                  >
                    {"VIEW EXAMPLES"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"annotation13"}
                  data-plasmic-override={overrides.annotation13}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.annotation13)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fq8U
                    )}
                  >
                    {"Wordpress Stack"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pEjz
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {"The world’s most popular CMS. "}
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 500 }}
                      >
                        {"Wordpress powers around 30% of the internet."}
                      </span>
                      <React.Fragment>
                        {
                          " Coupled with our cloud architecture, we can make it run lightning fast. This stack is perfect for most businesses who need a straightforward control panel and plug and play functionality."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>

                  <ButtonPink
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPink__l6IL
                    )}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"annotation14"}
                  data-plasmic-override={overrides.annotation14}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.annotation14)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"annotationHeaderMulti"}
                    data-plasmic-override={overrides.annotationHeaderMulti}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.annotationHeaderMulti
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4Osg1
                      )}
                    >
                      {"Headless Stack"}
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame25"}
                      data-plasmic-override={overrides.frame25}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame25)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eN1U3
                        )}
                      >
                        {"COMING"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__woXj7
                    )}
                  >
                    {
                      "Many companies are going headless for increased performance and functionality. While harder to control and maintain, a headless stack is perfect for web applications with complex functionality and performance goals."
                    }
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"annotationFeatures2"}
                    data-plasmic-override={overrides.annotationFeatures2}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.annotationFeatures2
                    )}
                  >
                    <div
                      data-plasmic-name={"plasmic2"}
                      data-plasmic-override={overrides.plasmic2}
                      className={classNames(projectcss.all, sty.plasmic2)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__wuHGt)}
                          displayHeight={"35px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"69.672px" as const}
                          loading={"lazy" as const}
                          src={{
                            src: group7LmHup7R1Z,
                            fullWidth: 69.672,
                            fullHeight: 35,
                            aspectRatio: 2000000
                          }}
                        />
                      ) : null}
                    </div>

                    <div
                      data-plasmic-name={"shopifyLogo1"}
                      data-plasmic-override={overrides.shopifyLogo1}
                      className={classNames(projectcss.all, sty.shopifyLogo1)}
                    />

                    <div
                      data-plasmic-name={"strapiIconSvgrepoCom1"}
                      data-plasmic-override={overrides.strapiIconSvgrepoCom1}
                      className={classNames(
                        projectcss.all,
                        sty.strapiIconSvgrepoCom1
                      )}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "desktopOnly")
                          ? true
                          : true
                      ) ? (
                        <Group4Icon
                          className={classNames(projectcss.all, sty.svg__vciKe)}
                          role={"img"}
                        />
                      ) : null}
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"annotation15"}
                  data-plasmic-override={overrides.annotation15}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.annotation15)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oKxH
                    )}
                  >
                    {"Tell us your specification and we’ll design it"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0VUuN
                    )}
                  >
                    {
                      "We’ll talk to you about the scope of your project and the best steps to take."
                    }
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"annotation16"}
                  data-plasmic-override={overrides.annotation16}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.annotation16)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"annotationHeaderMulti2"}
                    data-plasmic-override={overrides.annotationHeaderMulti2}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.annotationHeaderMulti2
                    )}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__laj9G
                      )}
                    >
                      {"Cloud deployment"}
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"frame26"}
                      data-plasmic-override={overrides.frame26}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.frame26)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hnie2
                        )}
                      >
                        {"NEW"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__opTnG
                    )}
                  >
                    {
                      "We’ve partnered with Cloudways to complete our end to end website solution. Once your website is complete we’ll deploy it to the cloud. You’ll enjoy benefits such as:"
                    }
                  </div>
                </p.Stack>

                <Embed
                  className={classNames("__wab_instance", sty.embedHtml__pDHxG)}
                  code={
                    "   <script>\n      window.addEventListener('scroll',(e)=>{\n        const nav = document.querySelector('.navbar');\n        if(window.pageYOffset>0){\n          nav.classList.add(\".add-shadow\");\n        }else{\n          nav.classList.remove(\".add-shadow\");\n        }\n      });\n    </script>" as const
                  }
                />
              </div>
            </div>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "landing",
    "hero",
    "heroCentre",
    "tyseraIsABespokeDesignAgencyProvidingBeautifulUxWebsiteDesignAndExpertDeploymentServicesToBusinessesOfAllSizes",
    "frame4",
    "button2",
    "frame13",
    "frame14",
    "footer",
    "logoFooter",
    "link",
    "link2",
    "link3",
    "link4",
    "link5",
    "link6",
    "slack",
    "frame7",
    "navbar",
    "navLeft",
    "frame5",
    "frame3",
    "frame10",
    "frame11",
    "navRight",
    "button5",
    "frame8",
    "navbar2",
    "navLeft2",
    "frame6",
    "frame9",
    "navRight2",
    "frame2",
    "group6",
    "button4",
    "frame24",
    "lineGraphicBg",
    "cloudwaysLogo1",
    "straight",
    "group",
    "group2",
    "group3",
    "group4",
    "wordpressSvgrepoCom1",
    "straight2",
    "straight3",
    "straight4",
    "group5",
    "endArrow",
    "straight5",
    "straight6",
    "annotation1",
    "annotation12",
    "annotation13",
    "annotation14",
    "annotationHeaderMulti",
    "frame25",
    "annotationFeatures2",
    "plasmic2",
    "shopifyLogo1",
    "strapiIconSvgrepoCom1",
    "annotation15",
    "annotation16",
    "annotationHeaderMulti2",
    "frame26"
  ],
  h1: ["h1"],
  landing: [
    "landing",
    "hero",
    "heroCentre",
    "tyseraIsABespokeDesignAgencyProvidingBeautifulUxWebsiteDesignAndExpertDeploymentServicesToBusinessesOfAllSizes",
    "frame4",
    "button2",
    "frame13",
    "frame14",
    "footer",
    "logoFooter",
    "link",
    "link2",
    "link3",
    "link4",
    "link5",
    "link6",
    "slack",
    "frame7",
    "navbar",
    "navLeft",
    "frame5",
    "frame3",
    "frame10",
    "frame11",
    "navRight",
    "button5",
    "frame8",
    "navbar2",
    "navLeft2",
    "frame6",
    "frame9",
    "navRight2",
    "frame2",
    "group6",
    "button4",
    "frame24",
    "lineGraphicBg",
    "cloudwaysLogo1",
    "straight",
    "group",
    "group2",
    "group3",
    "group4",
    "wordpressSvgrepoCom1",
    "straight2",
    "straight3",
    "straight4",
    "group5",
    "endArrow",
    "straight5",
    "straight6",
    "annotation1",
    "annotation12",
    "annotation13",
    "annotation14",
    "annotationHeaderMulti",
    "frame25",
    "annotationFeatures2",
    "plasmic2",
    "shopifyLogo1",
    "strapiIconSvgrepoCom1",
    "annotation15",
    "annotation16",
    "annotationHeaderMulti2",
    "frame26"
  ],
  hero: [
    "hero",
    "heroCentre",
    "tyseraIsABespokeDesignAgencyProvidingBeautifulUxWebsiteDesignAndExpertDeploymentServicesToBusinessesOfAllSizes",
    "frame4",
    "button2"
  ],
  heroCentre: [
    "heroCentre",
    "tyseraIsABespokeDesignAgencyProvidingBeautifulUxWebsiteDesignAndExpertDeploymentServicesToBusinessesOfAllSizes",
    "frame4",
    "button2"
  ],
  tyseraIsABespokeDesignAgencyProvidingBeautifulUxWebsiteDesignAndExpertDeploymentServicesToBusinessesOfAllSizes:
    [
      "tyseraIsABespokeDesignAgencyProvidingBeautifulUxWebsiteDesignAndExpertDeploymentServicesToBusinessesOfAllSizes"
    ],
  frame4: ["frame4", "button2"],
  button2: ["button2"],
  frame13: ["frame13", "frame14"],
  frame14: ["frame14"],
  footer: [
    "footer",
    "logoFooter",
    "link",
    "link2",
    "link3",
    "link4",
    "link5",
    "link6",
    "slack"
  ],
  logoFooter: ["logoFooter"],
  link: ["link", "link2", "link3", "link4", "link5", "link6", "slack"],
  link2: ["link2"],
  link3: ["link3"],
  link4: ["link4"],
  link5: ["link5"],
  link6: ["link6", "slack"],
  slack: ["slack"],
  frame7: [
    "frame7",
    "navbar",
    "navLeft",
    "frame5",
    "frame3",
    "frame10",
    "frame11",
    "navRight",
    "button5"
  ],
  navbar: [
    "navbar",
    "navLeft",
    "frame5",
    "frame3",
    "frame10",
    "frame11",
    "navRight",
    "button5"
  ],
  navLeft: ["navLeft", "frame5", "frame3", "frame10", "frame11"],
  frame5: ["frame5"],
  frame3: ["frame3"],
  frame10: ["frame10"],
  frame11: ["frame11"],
  navRight: ["navRight", "button5"],
  button5: ["button5"],
  frame8: [
    "frame8",
    "navbar2",
    "navLeft2",
    "frame6",
    "frame9",
    "navRight2",
    "frame2",
    "group6",
    "button4"
  ],
  navbar2: [
    "navbar2",
    "navLeft2",
    "frame6",
    "frame9",
    "navRight2",
    "frame2",
    "group6",
    "button4"
  ],
  navLeft2: ["navLeft2", "frame6", "frame9"],
  frame6: ["frame6"],
  frame9: ["frame9"],
  navRight2: ["navRight2", "frame2", "group6", "button4"],
  frame2: ["frame2"],
  group6: ["group6", "button4"],
  button4: ["button4"],
  frame24: [
    "frame24",
    "lineGraphicBg",
    "cloudwaysLogo1",
    "straight",
    "group",
    "group2",
    "group3",
    "group4",
    "wordpressSvgrepoCom1",
    "straight2",
    "straight3",
    "straight4",
    "group5",
    "endArrow",
    "straight5",
    "straight6",
    "annotation1",
    "annotation12",
    "annotation13",
    "annotation14",
    "annotationHeaderMulti",
    "frame25",
    "annotationFeatures2",
    "plasmic2",
    "shopifyLogo1",
    "strapiIconSvgrepoCom1",
    "annotation15",
    "annotation16",
    "annotationHeaderMulti2",
    "frame26"
  ],
  lineGraphicBg: [
    "lineGraphicBg",
    "cloudwaysLogo1",
    "straight",
    "group",
    "group2",
    "group3",
    "group4",
    "wordpressSvgrepoCom1",
    "straight2",
    "straight3",
    "straight4",
    "group5",
    "endArrow",
    "straight5",
    "straight6"
  ],
  cloudwaysLogo1: ["cloudwaysLogo1"],
  straight: ["straight"],
  group: ["group"],
  group2: ["group2"],
  group3: ["group3"],
  group4: ["group4", "wordpressSvgrepoCom1", "straight2"],
  wordpressSvgrepoCom1: ["wordpressSvgrepoCom1"],
  straight2: ["straight2"],
  straight3: ["straight3", "straight4"],
  straight4: ["straight4"],
  group5: ["group5", "endArrow"],
  endArrow: ["endArrow"],
  straight5: ["straight5"],
  straight6: ["straight6"],
  annotation1: ["annotation1"],
  annotation12: ["annotation12"],
  annotation13: ["annotation13"],
  annotation14: [
    "annotation14",
    "annotationHeaderMulti",
    "frame25",
    "annotationFeatures2",
    "plasmic2",
    "shopifyLogo1",
    "strapiIconSvgrepoCom1"
  ],
  annotationHeaderMulti: ["annotationHeaderMulti", "frame25"],
  frame25: ["frame25"],
  annotationFeatures2: [
    "annotationFeatures2",
    "plasmic2",
    "shopifyLogo1",
    "strapiIconSvgrepoCom1"
  ],
  plasmic2: ["plasmic2"],
  shopifyLogo1: ["shopifyLogo1"],
  strapiIconSvgrepoCom1: ["strapiIconSvgrepoCom1"],
  annotation15: ["annotation15"],
  annotation16: ["annotation16", "annotationHeaderMulti2", "frame26"],
  annotationHeaderMulti2: ["annotationHeaderMulti2", "frame26"],
  frame26: ["frame26"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  landing: "div";
  hero: "div";
  heroCentre: "div";
  tyseraIsABespokeDesignAgencyProvidingBeautifulUxWebsiteDesignAndExpertDeploymentServicesToBusinessesOfAllSizes: "div";
  frame4: "div";
  button2: "div";
  frame13: "div";
  frame14: "div";
  footer: "div";
  logoFooter: "div";
  link: "div";
  link2: "div";
  link3: "div";
  link4: "div";
  link5: "div";
  link6: "div";
  slack: "div";
  frame7: "div";
  navbar: "div";
  navLeft: "div";
  frame5: "div";
  frame3: "div";
  frame10: "div";
  frame11: "div";
  navRight: "div";
  button5: "div";
  frame8: "div";
  navbar2: "div";
  navLeft2: "div";
  frame6: "div";
  frame9: "div";
  navRight2: "div";
  frame2: "div";
  group6: "div";
  button4: "div";
  frame24: "div";
  lineGraphicBg: "div";
  cloudwaysLogo1: "div";
  straight: "div";
  group: "div";
  group2: "div";
  group3: "div";
  group4: "div";
  wordpressSvgrepoCom1: "div";
  straight2: "div";
  straight3: "div";
  straight4: "div";
  group5: "div";
  endArrow: "div";
  straight5: "div";
  straight6: "div";
  annotation1: "div";
  annotation12: "div";
  annotation13: "div";
  annotation14: "div";
  annotationHeaderMulti: "div";
  frame25: "div";
  annotationFeatures2: "div";
  plasmic2: "div";
  shopifyLogo1: "div";
  strapiIconSvgrepoCom1: "div";
  annotation15: "div";
  annotation16: "div";
  annotationHeaderMulti2: "div";
  frame26: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    landing: makeNodeComponent("landing"),
    hero: makeNodeComponent("hero"),
    heroCentre: makeNodeComponent("heroCentre"),
    tyseraIsABespokeDesignAgencyProvidingBeautifulUxWebsiteDesignAndExpertDeploymentServicesToBusinessesOfAllSizes:
      makeNodeComponent(
        "tyseraIsABespokeDesignAgencyProvidingBeautifulUxWebsiteDesignAndExpertDeploymentServicesToBusinessesOfAllSizes"
      ),
    frame4: makeNodeComponent("frame4"),
    button2: makeNodeComponent("button2"),
    frame13: makeNodeComponent("frame13"),
    frame14: makeNodeComponent("frame14"),
    footer: makeNodeComponent("footer"),
    logoFooter: makeNodeComponent("logoFooter"),
    link: makeNodeComponent("link"),
    link2: makeNodeComponent("link2"),
    link3: makeNodeComponent("link3"),
    link4: makeNodeComponent("link4"),
    link5: makeNodeComponent("link5"),
    link6: makeNodeComponent("link6"),
    slack: makeNodeComponent("slack"),
    frame7: makeNodeComponent("frame7"),
    navbar: makeNodeComponent("navbar"),
    navLeft: makeNodeComponent("navLeft"),
    frame5: makeNodeComponent("frame5"),
    frame3: makeNodeComponent("frame3"),
    frame10: makeNodeComponent("frame10"),
    frame11: makeNodeComponent("frame11"),
    navRight: makeNodeComponent("navRight"),
    button5: makeNodeComponent("button5"),
    frame8: makeNodeComponent("frame8"),
    navbar2: makeNodeComponent("navbar2"),
    navLeft2: makeNodeComponent("navLeft2"),
    frame6: makeNodeComponent("frame6"),
    frame9: makeNodeComponent("frame9"),
    navRight2: makeNodeComponent("navRight2"),
    frame2: makeNodeComponent("frame2"),
    group6: makeNodeComponent("group6"),
    button4: makeNodeComponent("button4"),
    frame24: makeNodeComponent("frame24"),
    lineGraphicBg: makeNodeComponent("lineGraphicBg"),
    cloudwaysLogo1: makeNodeComponent("cloudwaysLogo1"),
    straight: makeNodeComponent("straight"),
    group: makeNodeComponent("group"),
    group2: makeNodeComponent("group2"),
    group3: makeNodeComponent("group3"),
    group4: makeNodeComponent("group4"),
    wordpressSvgrepoCom1: makeNodeComponent("wordpressSvgrepoCom1"),
    straight2: makeNodeComponent("straight2"),
    straight3: makeNodeComponent("straight3"),
    straight4: makeNodeComponent("straight4"),
    group5: makeNodeComponent("group5"),
    endArrow: makeNodeComponent("endArrow"),
    straight5: makeNodeComponent("straight5"),
    straight6: makeNodeComponent("straight6"),
    annotation1: makeNodeComponent("annotation1"),
    annotation12: makeNodeComponent("annotation12"),
    annotation13: makeNodeComponent("annotation13"),
    annotation14: makeNodeComponent("annotation14"),
    annotationHeaderMulti: makeNodeComponent("annotationHeaderMulti"),
    frame25: makeNodeComponent("frame25"),
    annotationFeatures2: makeNodeComponent("annotationFeatures2"),
    plasmic2: makeNodeComponent("plasmic2"),
    shopifyLogo1: makeNodeComponent("shopifyLogo1"),
    strapiIconSvgrepoCom1: makeNodeComponent("strapiIconSvgrepoCom1"),
    annotation15: makeNodeComponent("annotation15"),
    annotation16: makeNodeComponent("annotation16"),
    annotationHeaderMulti2: makeNodeComponent("annotationHeaderMulti2"),
    frame26: makeNodeComponent("frame26"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
